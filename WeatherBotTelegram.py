from telebot import types
from datetime import *
import requests
import telebot
import psycopg2
import rollbar
from math import ceil
import os
from dotenv import load_dotenv

load_dotenv()

rollbar.init(os.getenv('ROLLBAR_ACCESS_TOKEN'))
token = os.getenv("TELEGRAM_TOKEN")


bot = telebot.TeleBot(token)

MAIN_STATE = "main"
CITY_STATE = 'city'
WEATHER_DATE_STATE = "weather_date_handler"

data = {'states': {}, MAIN_STATE: {}, CITY_STATE: {}, WEATHER_DATE_STATE: {}, 'forecast': {}, }

# dictionaries for translation into Russian
week_day = {'Mon': '–ü–Ω',
            'Tue': '–í—Ç',
            'Wed': "–°—Ä",
            'Thu': "–ß—Ç",
            'Fri': "–ü—Ç",
            'Sat': "–°–±",
            'Sun': "–í—Å"}

month_dict = {"January": "—è–Ω–≤–∞—Ä—è",
              "February": "—Ñ–µ–≤—Ä–∞–ª—è",
              "March": "–º–∞—Ä—Ç–∞",
              "April": "–∞–ø—Ä–µ–ª—è",
              "May": "–º–∞—è",
              "June": "–∏—é–Ω—è",
              "July": "–∏—é–ª—è",
              "August": "–∞–≤–≥—É—Å—Ç–∞",
              "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
              "October": "–æ–∫—Ç—è–±—Ä—è",
              "November": "–Ω–æ—è–±—Ä—è",
              "December": "–¥–µ–∫–∞–±—Ä—è"
              }

api_url = 'https://stepik.akentev.com/api/weather'


@bot.message_handler(func=lambda message: True)
def dispatcher(message):
    user_id = message.from_user.id
    state = data["states"].get(user_id, MAIN_STATE)

    if state == MAIN_STATE:
        main_handler(message)
    elif state == CITY_STATE:
        city_handler(message)
    elif state == WEATHER_DATE_STATE:
        weather_date(message)


# dialog start function
def main_handler(message):
    user_id = message.from_user.id

    if message.text.lower() == "/start" or message.text.lower() == '–ø–æ–≥–æ–¥–∞':
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
        data["states"][user_id] = CITY_STATE

    elif '/reset' in message.text.lower():
        bot.send_message(message.from_user.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
        data["states"][user_id] = CITY_STATE

    else:
        bot.send_message(user_id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª")


# function with entering the name of the city
def city_handler(message):
    user_id = message.from_user.id

    if '/reset' in message.text.lower():
        data["states"][user_id] = CITY_STATE
        bot.send_message(message.from_user.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')

    else:
        data[WEATHER_DATE_STATE][user_id] = message.text.lower()
        city = data[WEATHER_DATE_STATE][user_id]
        response = requests.get(api_url, params={'city': city, 'forecast': 0})
        data_ = response.json()

        # check for the wrong city name
        if 'error' in data_:
            bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑")
            data["states"][user_id] = CITY_STATE

        else:
            def timestamp(delta=0):
                day = datetime.today() + timedelta(days=delta)
                return day

            # create buttons
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(*[types.KeyboardButton(button) for button in
                         ["–°–µ–≥–æ–¥–Ω—è (" + week_day[timestamp().strftime("%a")] + ", " + timestamp().strftime("%d") + " " +
                          month_dict[timestamp().strftime("%B")] + ")",
                          "–ó–∞–≤—Ç—Ä–∞ (" + week_day[timestamp(1).strftime("%a")] + ", " + timestamp(1).strftime(
                              "%d") + " " + month_dict[timestamp(1).strftime("%B")] + ")",
                          "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ (" + week_day[timestamp(2).strftime("%a")] + ", " + timestamp(2).strftime(
                              "%d") + " " +
                          month_dict[timestamp(2).strftime("%B")] + ")"]])
            bot.send_message(user_id, '–°–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞?', reply_markup=markup)
            data["states"][user_id] = WEATHER_DATE_STATE


# function for entering the weather forecast day
def weather_date(message):
    user_id = message.from_user.id
    city = data[WEATHER_DATE_STATE][user_id]
    data['forecast'][user_id] = message.text.lower()
    data_forecast = data['forecast'][user_id]

    if "/reset" in message.text.lower():
        data["states"][user_id] = CITY_STATE
        bot.send_message(message.from_user.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')

    else:
        def forecast_day():
            if "—Å–µ–≥–æ–¥–Ω—è" in data_forecast:
                forecast_data = 0
            elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in data_forecast:
                forecast_data = 2
            elif "–∑–∞–≤—Ç—Ä–∞" in data_forecast:
                forecast_data = 1
            else:
                forecast_data = 3
            return forecast_data

        if forecast_day() == 3:
            bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')

        response = requests.get(api_url, params={'city': city, 'forecast': forecast_day()})
        data_ = response.json()
        smile = data_['description']

        # smile function
        def weather_smile():
            cloud, sun, rain, snow, cloud_2, cloud_sun = '‚òÅ', '‚òÄ', 'üåß', '‚ùÑ', "üå•", "‚õÖ"
            if "–ø–∞—Å–º—É—Ä–Ω–æ" in smile:
                send_smile = cloud
            elif smile == "—Å–æ–ª–Ω–µ—á–Ω–æ" or smile == '—è—Å–Ω–æ':
                send_smile = sun
            elif smile == '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏':
                send_smile = cloud_sun
            elif '–¥–æ–∂–¥—å' in smile:
                send_smile = rain
            elif '—Å–Ω–µ–≥' in smile:
                send_smile = snow
            elif smile == '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å' or smile == '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å':
                send_smile = cloud_2
            else:
                send_smile = ''

            return send_smile

        # depending on the selected day, a response from the bot is created
        if "—Å–µ–≥–æ–¥–Ω—è" in message.text.lower():
            bot.send_message(message.from_user.id,
                             f"–ó–∞ –æ–∫–Ω–æ–º {data_['description']}  {weather_smile()},"
                             f" —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {ceil(data_['temp'])}¬∞C")
            data["states"][user_id] = CITY_STATE

        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in message.text.lower():
            bot.send_message(message.from_user.id,
                             f"–ó–∞ –æ–∫–Ω–æ–º –±—É–¥–µ—Ç {data_['description']}  {weather_smile()},"
                             f" —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {ceil(data_['temp'])}" + "¬∞C")
            data["states"][user_id] = CITY_STATE

        elif "–∑–∞–≤—Ç—Ä–∞" in message.text.lower():
            bot.send_message(message.from_user.id,
                             f"–ó–∞ –æ–∫–Ω–æ–º –±—É–¥–µ—Ç {data_['description']}  {weather_smile()},"
                             f" —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {ceil(data_['temp'])}" + "¬∞C")
            data["states"][user_id] = CITY_STATE

        actions(query="INSERT INTO actions (user_id, city, forecast_day, created_at) "
                      f"VALUES({user_id}, '{city}', '{data_forecast}', CURRENT_TIMESTAMP)")


bot.polling()
